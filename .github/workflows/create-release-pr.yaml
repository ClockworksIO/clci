name: Create Release PR 
on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'CHANGELOG'
      - 'README.md'
      - 'CODE_OF_CONDUCT.md'
      - 'LICENSE'

jobs:
  create_release_pr:
    runs-on: ubuntu-latest
    name: Create a new release PR
    if: "!contains(github.event.head_commit.message, 'chore: new release')"
    steps:
      # first checkout the code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Install java before installing clojure tools which needs java
      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      # Setup Clojure / Babashka environment
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          # Install just one or all simultaneously
          # The value must indicate a particular version of the tool, or use 'latest'
          # to always provision the latest version
          cli: 1.11.1.1208             # Clojure CLI based on tools.deps
          bb: 1.1.172                  # Babashka
          clj-kondo: 2023.01.20        # Clj-kondo
          cljstyle: 0.15.0             # cljstyle
      # Use caching for fetched dependencies
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('deps.edn', 'bb.edn') }}
          restore-keys: cljdeps-
      # Run cljstyle to verify the code is formatted correctly
      # - name: Format code
      #   run: bb format --check --silent
      # # Run kondo to lint the code
      # - name: Lint code
      #   run: bb lint
      # # Run all unit Tests
      # - name: Unit Tests
      #   run: bb test
      # Set the version for the release
      - name: Update Version
        run: bb release --only-update-version
        env:
          GITHUB_TOKEN: ${{ github.token }}
      # Add and commit the new version
      - name: Commit Release Changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'chore: new release'
          new_branch: 'release'
      # Create a PR for the new release
      - name: Create Release PR
        id: create-pull-request 
        uses: peter-evans/create-pull-request@v4
        with:
          base: 'master'
          branch: 'release'
      # #
      # - name: Merge Pull Request
      #   uses: juliangruber/merge-pull-request-action@v1
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     number: ${{ steps.create-pull-request.outputs.pull-request-number }}
      #     method: squash # merge rebase
      #     repo: juliangruber/octokit-action
      # Create the actual release
      # - name: create release
      #   run: |
      #     git fetch --all
      #     git checkout master
      #     git pull origin master
      #     bb release --only-release
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}